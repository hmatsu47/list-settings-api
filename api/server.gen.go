// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リリース設定の取得（タグ指定分）
	// (GET /tagSettings)
	GetTagSettings(c *gin.Context)
	// リリース設定の取得（URI指定分）
	// (GET /uriSettings)
	GetUriSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTagSettings operation middleware
func (siw *ServerInterfaceWrapper) GetTagSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTagSettings(c)
}

// GetUriSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUriSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUriSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tagSettings", wrapper.GetTagSettings)

	router.GET(options.BaseURL+"/uriSettings", wrapper.GetUriSettings)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX34rbxhd+lR/z66V2JTteW6urlhJaQxLKJr4KyzKSR9LYMxp5ZmTLMYbEpk0KhdyU",
	"FkJ6kbS06b+lUAoJ3aYPozrJXV6hzMi7ltfeXa1bCgs7kmfO+c53vnN0ZgQ8RmMWoUgK4IwARyJmkUD6",
	"AXHO+N78jXrhsUiiSKoljGOCPSgxi8yOYJF6J7wQUahW73DkAwf831xYN/NfhXlVWQXj8dgAbSQ8jmNl",
	"BDggmzzLpt9n06Ns+iSbTrPJ72o9eZ5Nf8omL7LpV9n0V714nE3vZ5OvwdgAEgY3kZQ4CjbCiSWi4iLA",
	"t2CgXQ1jBBwAOYfD9fD/zCa/zP54Ojt6mN07fPPs59nho/OwJxyXx55SsgH0FsdloLf2mqVxj405CO08",
	"T6YzKp3Kp8rO9EdggJizGHGJc61RJAQMNANztEJyHAXaIUe9BHPUBs7tk437BpBYErUzB3ESJnM7yJPA",
	"AOmWkCwmOAg1nbgNHBCiO7DRsKs4ISLSxq9BIfcQQVAoB6cjefX47uvfJtn0B/13lE1eHBN0ViSYwgAd",
	"JByvxrIeUm3QtW1vCOt2v8vn8eZwDqDe5TNO1Qq0oURbElO0CPZcywISESZdr1etu+088UUqF0iXXRao",
	"XSKnHMOkUye0EgwrQ9ghOpwbKD02skYqBWpnLz/O7j351wkWA2o1hB17lUaHFgn+p/wO6nWE/HoUpr0B",
	"LcXvKXqLzJRjt9Jj0q/esavMbqQ6FtWe1hRgoRldQrwcxUxgyfjwIIIUlWUYuw3RqaY+2fGsSt4j8s52",
	"MI+0nJlODWH/yrAr0zuYLJlJOClrJCSDXUnr3aqXEKaNSBiIpZZZxozlJ/2dfiWEftjeyc0Uu+j6Q2nV",
	"7qMgEMmu6yargjjN7nJ8p0kr6ETluJw+Ijoc+G2ctl2cNjTsVl4oZ3X8S4gDRX3MWURRJC+ljnQQJ2S3",
	"sks73YqrMREo5AEvNN3zPmJLPWhsgAilJ4cvOlssMC0n3sceuhT6pMqG9o7n0xT2a5trm9V6btCNqvUK",
	"EpVNtS2hTGppjII0SMmqvlYSdCri0npr6Z5VRm8oFY3Qs+tsBw2U3hQkHPnseJSBnt6LKMREFSeFUiS1",
	"xruBerHtMQoMkGcDfIg5G0KR/O+62hNiAYEakvQxKWPhmGaAZZi46ph5bAmsDmIFSWeTb/QIooaPv57f",
	"ffPtd68/f/beR01gAII9NJ+55gCuN2+V8WgSLOTWnDuxBePYdAlzTQqFRNy81nz/6o2bV/XcNadz6QAw",
	"QB9xkWOtbFtqI4tRBGMMHHBl29q2VOVBGeqiMxcjrn4OkDz/Izqv4nuHs4dfzF5++fboQf4xePXZ/dnh",
	"o9mDT94efQq0S65Hy6ZK4wdI3ir4MZYvAlXLOqvQTvaZa0ZxnRofJkRefHz5sqHrI6EU8uFm4eU9/7b6",
	"v2B+X5k1F3P3poS29poXsdkqONmEzTWXg/+GzdXYjqlMOC5QqdoBjiTiESTA8SERaDyet1jE1YFRoZQc",
	"0yTMgyRkQjpXLMsC4/0Ty6MyN6lFn1hK6dgYXXiZWRxdCmG8v76l9dq7NHapZ1ttW12X/g4AAP//8uCn",
	"2iQPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

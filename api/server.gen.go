// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リリース設定の取得（タグ指定分）
	// (GET /tagSettings)
	GetTagSettings(c *gin.Context)
	// リリース設定の取得（URI指定分）
	// (GET /uriSettings)
	GetUriSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTagSettings operation middleware
func (siw *ServerInterfaceWrapper) GetTagSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTagSettings(c)
}

// GetUriSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUriSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUriSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tagSettings", wrapper.GetTagSettings)

	router.GET(options.BaseURL+"/uriSettings", wrapper.GetUriSettings)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXX2sbRxD/KmXbx7NPUmzpfE8txbSCJBTHfgrGrE6ju5V3b8+7e/oTIYh1tEmhkJfS",
	"QkgfkpbW/WcKpZBQN/0wVyV5y1couydLJ0uxL24TMHhvvTPz+/1mdnY8QB5nEQ8hVBK5AyRARjyUYD5A",
	"CC62Jjt6w+OhglDpJY4iSjysCA/ttuSh3pNeAAzr1XsCWshF79oz73b2V2lvaq9oOBxaqAnSEyTSTpCL",
	"0tFRmvyYJidp8jBNknT0p16PHqfJL+noSZp8kya/m8WDNLmTjr5FQwsp7N8ApUjoXwonUcDkRYC3pzFM",
	"xH4EyEVYCNxfzuLvdPTb+K9H45N76eHxi6Nfx8f3z6MQC/LGKexMYxShsLNVL4x/aE2wGAxZbt1B4cw+",
	"0n6Sn5GFIsEjEIpkpcdASuwbJSZopRIG/tBCAg5iIqCJ3JvTg7sWUkRRfTIDMaXJG23wFLJQb0UqHlHi",
	"B0ZW0kQuCuAWrtWcCompDI3zq1iqLaCApQ5wlsmzB7ef/zFKk5/Mz0k6enIq0KuYEIZ92IsFWeSyHNJa",
	"d99xvD6uOp19MeGbwdnD5lSLC6ZXqIkVrCjCYEb2XM8SUxnE+95BpdpoZonPSzlDOh8yJ+2cOMUUpu0q",
	"ZWW/X+7jNjV0rkPv1MmSUslJO376aXr48H8XWHZZqSadyCvX2iwv8H/Vt1utArSqYdA76LJC+p6RN69M",
	"MXXLB1y1KrecCndqPcMl162W3MNcb3qNGoawQwQPGYRqL8QMiiod0O6GYtX9ihdTbtAp7Mu5rlXETakV",
	"d9Y75QC3guZ65ibfwZYb9SpOB3xfxhuNRryYjAVKuTTkJCyWhZD1u60m6TUbpFczAHMNdyELs/b6FlLQ",
	"60Yx3ShvsPZ+uWGgUSzVnsh1uPMejrkLP7RQCL2p8UW2+WrWzwSIDvHgtdDHFd531r0W6+HOWoEknomS",
	"y2kuIcVyCj1ZCzynytehq3OqY5OwxU8fZ+yZs8AwobrUGVYyXqu97+uNVY8zZKGMKvqYCN7HMn7nmj4T",
	"EImRfvaNmVKRdG3bJyqIG9rMPvWEFkeLXL2ko+/MY6qf0X8e337x/Q/Pvzz64JM6shAlHkymiAmAa/Xt",
	"IhFtSqRakZlMcgVHkd2gvGEzLBUI+2r9w83rNzbNBDFRdc4AWagDQmZYy6slfZBHEOKIIBddWS2tlnRZ",
	"YxWYirZns5v59kGd/xxMrsjh8fjeV+OnX788uZv1s2df3Bkf3x/f/ezlyefIhBRmWKrrNH4EajsXx5qf",
	"cCul0quqeHrOXjJjmtS0cEzVxebzU7QZmGLGsOhfjl7WQW/q3zPld7VbezZJXlbQna36RWru5IJcRs0l",
	"4+7bUXOR26mUsSA5KXU7IKECEWKK3BamEszl150FhDYY5K6Sa9uUe5gGXCr3SqlUQsPdqedBkf8NZn1i",
	"LqVDa3DhWD4znaMw3F3e0g6aGyxqMM8pNR09+P8bAAD//93QHzf9DQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リリース設定の取得（タグ指定分）
	// (GET /tagSettings)
	GetTagSettings(c *gin.Context)
	// リリース設定の取得（URI指定分）
	// (GET /uriSettings)
	GetUriSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTagSettings operation middleware
func (siw *ServerInterfaceWrapper) GetTagSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTagSettings(c)
}

// GetUriSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUriSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUriSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tagSettings", wrapper.GetTagSettings)

	router.GET(options.BaseURL+"/uriSettings", wrapper.GetUriSettings)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXXW/bNhf+Ky/47lKJbDexHV9tGIotQFsMaXNVBAEt0xITUVRIyh8NDEQyuqZYi25D",
	"0WxFhvULXdat2YB1QIt57Y/hlGRX+QsDKceWazdR061AgFD0+Xqec3h4uA4sSnzqIU9wUFkHDHGfehzp",
	"D8QYZQv9HbVhUU8gT6gl9H0XW1Bg6pkrnHpqj1sOIlCtPmCoDirg/+bQupn8ys2zyirodDoGqCFuMewr",
	"I6ACZLQjuz/Kbk9278tuV0Z/qHX0XHZ/ltEL2f1Odn/Ti23ZvSajh6BjAAHti0gI7NmnihMLRPhJAV8a",
	"+NAe2z4CFQAZg+3JKF7J6Nf4zwdx75YMdw92nsa7d4+DEDD8n0NYHPjIAmFxYT5z/B2jH4uOIcltZT1z",
	"Zh8oO92fgAF8Rn3EBE5KjyDOoa2Z6EfLBdPhdwzA0FqAGaqByuWB4JIBBBaukkyCGMCk1RVkCWCA1hQX",
	"1Hex7WhacQ1UgIOuwFKpXMCByz1t/BzkYgG5CHLl4HUke9sb+79HsvtE//Vk9OKIoDchwQTaaDlgeBzL",
	"5JBmmqvlstWGxXJjlfXxJuEsQy1Vp4yoFahBgaYEJmgI9ljLHLrcCVattUKxWksSn6ZyGOmoyxS1I+Rk",
	"Y9hdKbokb7fzbbjiajgXUOvIyIRSSVEbv7wqw/v/OsG8SXIlXvatfGmFpAl+V36bxSJC9aLntNaaJBO/",
	"r9GbZiYbu/k1KuqFK+UCLZdaGkuqW004h6ne9BY1jLwGZtQjyBPLHiQoK9OO25wTpLhasAKX6uj8gDvv",
	"Xsht4jewWD3Tgtye0XYFtPk43rwMH8koip9+E2/vyHBLhk9k+IUMH8rw+/jes/jLTRn+cvA43H92T4Y3",
	"tHR4T4ZfyXD376s3480tGSZqj/fuXIufbqmdjRuHvc297Sd7N67Fu3cPe9flxk0ZfX3w6rYMvwXGsB9n",
	"AZKrB43ZRt6Bdac2mwBJ9+bJSq1CuYFsmwdz1WowXmZjyeqzk6qzVI1kKzOPtJv1Gm7VqrhV0nGmbpQx",
	"2of3x3uosVbTD9y5/BxZWc1XdWgu5GKZpVr4cTfjSEfrGMBDrYHySbrp46ruQcQa2EJvFX1QoO3yrFUn",
	"LdiYyZTLES+pnKYSki2nqMVLjlUu0lnUVDlVvrFXp0fTB7S0LCIQu+osEyh4MFP60FYb0xYlwAAJVPAp",
	"ZrQNefC/80rGwRwCNddoNSF8XjFNGwsnqCo188gSGJ+dUvUio0d6WlBzwl/PNw4e/7B/e+ejz+aBAVxs",
	"of6Y1A/g/PylLB5NF3MxxROa+BT0fbPq0qpJIBeImefmPz574eJZPSL1WR1RAAZoIMb7vWU6pwSpjzzo",
	"Y1ABZ6Zz0zlV1lA4uqLN4XCqv20kjr/v+kck3I1v3Ylfbh32NpOGnbSaePPzw951oF0yPQ3OqzR+gsSl",
	"lB9jdIQv5HJvquKBnDlhiNapqcPAFSerjz4T9EQYEAJZ+3TwklZ+Wf0fMr+kzJrDUfm0hC4uzJ/E5mLK",
	"yWnYnDDPvx82x7EdURkwnKJStQPsCcQ86IJKHboc6cOvOgtiSmE9dZQqpulSC7oO5aJyJpfLgc7SwPJ6",
	"lsfPsE+MpLRjrJ/47hiqjkDoLE1uaWu1OeJXiVXO1crqZfNPAAAA//811YNT3g4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リリース設定の取得（タグ指定分）
	// (GET /tagSettings)
	GetTagSettings(c *gin.Context)
	// リリース設定の取得（URI指定分）
	// (GET /uriSettings)
	GetUriSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTagSettings operation middleware
func (siw *ServerInterfaceWrapper) GetTagSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTagSettings(c)
}

// GetUriSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUriSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUriSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tagSettings", wrapper.GetTagSettings)

	router.GET(options.BaseURL+"/uriSettings", wrapper.GetUriSettings)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWb2vbRhj/KuO2l0oku4mt6tXGKJuhLSNtXpUQzvJJOudOp9ydbLlG0Fhs7WDQN2OD",
	"0r1oN7bsXxiMQcuy7sNobvuuX2HcyY6lxUkUbwwCOZ3veZ7f83ue+90zBi6jEQtRKAVwxoAjEbFQIP2B",
	"OGd8a7ajNlwWShRKtYRRRLALJWah2RcsVHvCDRCFavUORx5wwNvmwrtZ/CrMa8orSNPUAD0kXI4j5QQ4",
	"IJ8c5tn3eXacZ0/yLMsnv6v15Fme/ZRPnufZV3n2q148zrP7+eRrkBpAQv8WkhKH/ko4sURUXAT4NvR1",
	"qFGEgAMg53C0HP6f+eSX6R9Pp8cP84Oj14c/T48enYc95rg+9oSSFaBvc1wH+vZWpzbu1JiB0MGLYjrj",
	"2qV8qvxkPwIDRJxFiEtc9BpFQkBfMzBDKyTHoa8DcrQfY456wLlzcnDHABJLok4WIE7SZN0+ciUwQLIm",
	"JIsI9gNNJ+4BBwToLmy37SaOiQi18+tQyC1EEBQqwD8zefn43qvfJnn2g/47zifP5wSdlQmm0Ee7Mcen",
	"c1kOaWO4Z9vuCLbswR6f5VvA2YX6lMc4VSvQgxKtSUzRItlzPQtIRBDvufvNVrdXFH7OWSXretSRfovQ",
	"hj9qjGCfaJw3UTJ3sqQHSpxNX3ycHzz5z5kTQ2q1hR25jXaflpn7t8QNWy2EvFYYJPtDWiWunHM93hr7",
	"THrNu3aT2e1Eo1SKsuTOlPTjEv3GUcQEloyPdkNIUV3ucLct+s3EI5uu1SiudSFGuzEndZ0EZHhV0tZe",
	"040J004k9EVFnuq4sbx4sDloBNALepuFm7JiLTdKmvYA+b6Ir3a7cbVGit96tQnpaOj1cNLr4qStI28X",
	"7XeWQF6iMAQKuctLynKeUlfuY2qAECUnxhfZlltS15EPsIsu1Q1xk43sTdejCRxsrNoNEsp4I4mQn/gJ",
	"qVZEsVqvIigR7cC1W2wTDVVFlBccemz+NkJXn0UUYqI6kEIp4o32u77aWHcZBQYoMgcfYs5GUMRv3VBn",
	"AiwgUK+uNpMyEo5p+lgGcVeZmXNP4PTLXip6PvlGv2nqNfvr2b3X33736vPD9z7qAAMQ7KLZIz4DcKNz",
	"u05Ek2Ah12aEizUYRWaXsK5JoZCIm9c771+7eesaKNFZMQAGGCAuCqyNdUsdZBEKYYSBA66sW+uW6k0o",
	"A92W5mJm0t8+kueL96zPD46mD7+YvvjyzfGDQqpefnZ/evRo+uCTN8efAh2S61mlo8r4AZK3S3GM6mTZ",
	"tKyzmvrknLlkttOl8WBM5MXm1elVt3RMKeSj1dIrhO2O+r9gfke5NReD3KqEbm91LmJzuxRkFTaXTJv/",
	"D5unc5tTGXNcolLJAQ4l4iEkwPEgEShNZ3KGuDIYl66SY5qEuZAETEjnimVZIN058TyuM5ovdKJS0tQY",
	"XzgdL0wrKaQ7yyVtv3eVRl3q2lbPVvP33wEAAP//EI0qvXUNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

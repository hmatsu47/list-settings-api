// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// リリース設定の取得（タグ指定分）
	// (GET /tagSettings)
	GetTagSettings(c *gin.Context)
	// リリース設定の取得（URI指定分）
	// (GET /uriSettings)
	GetUriSettings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTagSettings operation middleware
func (siw *ServerInterfaceWrapper) GetTagSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTagSettings(c)
}

// GetUriSettings operation middleware
func (siw *ServerInterfaceWrapper) GetUriSettings(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUriSettings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tagSettings", wrapper.GetTagSettings)

	router.GET(options.BaseURL+"/uriSettings", wrapper.GetUriSettings)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xX32obxxd+lR/z6+Xau1JkabNXLSW0giQUJ7oKxoxWs7sjzeysZmallYUglmiTQiE3",
	"pYWQXiQtrfvPFEohoW76MFslucsrlJmVrV1bttdqKRg8Gs055zvfnPPpzBi4jEYsRKEUwBkDjkTEQoH0",
	"B8Q549uLHbXhslCiUKoljCKCXSgxC82uYKHaE26AKFSrdzjygAP+by69m9m3wryhvILJZGKADhIux5Fy",
	"AhyQTg/S2ffp7CidPU1ns3T6u1pPn6ezn9Lpi3T2VTr7VS+epLMH6fRrMDGAhP4dJCUO/bVwYomouAzw",
	"XejrUKMIAQdAzuFoNfw/0+kv8z+ezY8epfuHbw5+nh8+vgh7zHF57Akla0BvcVwGemu7WRr3xFiA0MGz",
	"y3TGpa/ymfIz+xEYIOIsQlzirNYoEgL6moEFWiE5Dn0dkKN+jDnqAOfeycEdA0gsiTqZgThJk7W7yJXA",
	"AMmGkCwi2A80nbgDHBCgPdho2FUcExFq5zehkNuIIChUgNOZvHpy//Vv03T2g/47Sqcvjgk6LxNMoY92",
	"Y47P5rIaUm3Ys213BOv2oMcX+WZwdqE+5TFO1Qp0oEQbElO0TPZCzwISEcQ9t1+ttzvZxeepXCIthsxR",
	"WyCnHMOkWye04o8qI9glOp3bKDl2sqJUctTOX36c7j/91wkWQ2o1hB25lUaX5gn+p/wO63WEvHoYJP0h",
	"LcXvKXrzzJRjt9Jn0qvu2VVmNxKdi5KnFQ2YE6MrFC9HERNYMj7aDSFFZRnG7YboVhOPbLlWJdOITNl2",
	"F5mWc9OtIexdG/VksodJwU3MSVknARlel7Teq7oxYdqJhL4oSGYZN5YXD7YGlQB6QWcrc5NX0dVGSdUe",
	"IN8X8fV2Oz5bEKfZLeZ3mrRcnag7LlcfIR0NvQ5OOm2cNDTsVtYo5yn+FYqDQCF3eU4qL/rpKSjHxAAh",
	"Sk6ML7PNt4UuAj7ALrpSRcZVNrK3XI8mcFBbvyJZrd/2e2G1XkGism5FSijjWhIhP/ETcrYqCumVLomW",
	"lpUyJYES0Qhcu8620FCVhIqPQ48dTxvQ1WcRhZio/qFQirjWeNdXG5suo8AAGfXgQ8zZCIr4f7fUmQAL",
	"CNQco82kjIRjmj6WQdxWZuaxJ3B2VspVXTr9Rk8Jaj746/n9N99+9/rzg/c+agIDEOyixVi0AHCrebdM",
	"RJNgITcW3IkNGEVmm7C2SaGQiJs3m+/fuH3nhh6NFnQWDIABBoiLDGtl01IHWYRCGGHggGub1qalmgPK",
	"QPeFuZxC9WcfyYt/5xaNtn84f/TF/OWXb48eZnr96rMH88PH84efvD36FOiQXE9/TXWNHyB5NxfHKM7q",
	"Vcs6r6tOzpkrpmV9NR6MibzcvPge0M0QUwr5aL30Mlm+p/4vmd9Rbs3laLwuoa3t5mVstnJB1mFzxfz+",
	"37B5NrdjKmOOc1QqOcChRDyEBDgeJAJNJgs9RVwZjHOt5JgmYS4kARPSuWZZFpjsnHgel3nsLHWicKUT",
	"Y3zpe2NpWkhhsrNa0vqd6zRqU9e2OrZ60fwdAAD//zOG8KLHDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
